rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Staff profiles can be read by anyone.
    // Staff profiles can be created/updated by Cloud Functions (no auth context) or by authenticated users
    match /staff/{staffId} {
      allow read: if true;
      allow write: if request.auth == null; // Allow Cloud Functions to write
      allow write: if request.auth.uid == staffId; // Allow authenticated users to update their own profile
    }
    
    // Tips can be created by anyone (including Cloud Functions).
    // A user can only read their own tips if authenticated.
    match /tips/{tipId} {
      allow create: if true;
      allow read: if request.auth != null && request.auth.uid == resource.data.staffId;
      allow read: if request.auth == null; // Allow Cloud Functions to read tips
    }
    
    // XMTP Messages - optimized rules for Firebase environment
    match /xmtp_messages/{messageId} {
      // Allow authenticated users to access their messages
      allow read, write: if request.auth != null && 
        (request.auth.token.wallet_address == resource.data.from || 
         request.auth.token.wallet_address == resource.data.to ||
         request.auth.uid == resource.data.from || 
         request.auth.uid == resource.data.to);
      // Allow creation with proper sender validation
      allow create: if request.auth != null && 
        (request.resource.data.from == request.auth.token.wallet_address ||
         request.resource.data.from == request.auth.uid);
      // Allow Cloud Functions to read/write for Firebase compatibility
      allow read, write: if request.auth == null;
    }
    
    // XMTP Conversations - optimized for Firebase environment
    match /xmtp_conversations/{conversationId} {
      // Allow participants to access conversations
      allow read, write: if request.auth != null && 
        (request.auth.token.wallet_address in resource.data.participants ||
         request.auth.uid in resource.data.participants);
      // Allow creation with participant validation
      allow create: if request.auth != null && 
        (request.auth.token.wallet_address in request.resource.data.participants ||
         request.auth.uid in request.resource.data.participants);
      // Allow Cloud Functions for hybrid XMTP+Firestore storage
      allow read, write: if request.auth == null;
    }

    // Fallback rule to deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 